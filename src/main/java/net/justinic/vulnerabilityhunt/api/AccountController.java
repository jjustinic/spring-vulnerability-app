package net.justinic.vulnerabilityhunt.api;

import net.justinic.vulnerabilityhunt.domain.Account;
import net.justinic.vulnerabilityhunt.domain.DisabledAccount;
import net.justinic.vulnerabilityhunt.infrastructure.AccountRepository;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import javax.validation.Valid;

@Controller
public class AccountController {

    private final AccountRepository accountRepository;

    public AccountController(AccountRepository accountRepository) {
        this.accountRepository = accountRepository;
    }

    @GetMapping("/create/user")
    public String createUserForm(ModelMap model) {
        model.put("account", new DisabledAccount());
        return "form";
    }

    @PostMapping("/create/user")
    public String createUserSubmit(@Valid @ModelAttribute Account account,
                                BindingResult bindingResult,
                                ModelMap model) {
        if (bindingResult.hasErrors()) {
            return "form";
        }
        accountRepository.addAccount(account);
        return "redirect:/user/" + account.getUsername();
    }

    @GetMapping("/user/{user}")
    public String getAccount(@PathVariable String user, ModelMap model) {
        Account account = accountRepository.findAccountByUsername(user);
        if (!account.isEnabled()) {
            throw new ResourceNotFoundException();
        }
        model.put("account", account);
        return "view";
    }

    @GetMapping("/edit/user/{user}")
    public String editAccountForm(@PathVariable String user, ModelMap model) {
        Account account = accountRepository.findAccountByUsername(user);
        model.put("account", account);
        return "form";
    }

    @PostMapping("edit/user/{user}")
    public String editAccountSubmit(@PathVariable String user,
                                    @Valid @ModelAttribute Account account,
                                    BindingResult bindingResult,
                                    ModelMap model) {
        if (bindingResult.hasErrors()) {
            return "form";
        }
        accountRepository.updateAccount(user, account);
        return "redirect:/user/" + account.getUsername();
    }

}
